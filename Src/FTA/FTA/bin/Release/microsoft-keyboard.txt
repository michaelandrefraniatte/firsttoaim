<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css">
    <style>
	.svelte-1xis06h {
		display: none;
	}
    </style>
    <style>

        * {
        }

        body {
        }

/* width */
::-webkit-scrollbar {
    width: 10px;
}

/* Track */
::-webkit-scrollbar-track {
    background: #444;
}

/* Handle */
::-webkit-scrollbar-thumb {
    background: #888;
}

    /* Handle on hover */
    ::-webkit-scrollbar-thumb:hover {
        background: #eee;
    }

        input {
            border: 1px solid transparent;
            background-color: #f1f1f1;
            padding: 10px;
            font-size: 16px;
            width: 14%;
        }

            input[type=text] {
                background-color: #f1f1f1;
                width: 100%;
            }

            input[type=submit] {
                color: #fff;
                cursor: pointer;
            }
    </style>
    <style>

        :root {
            --animation_speed: 600ms;
            --animation_delay: 200ms;
        }

        .jp-posts {
            position: absolute;
            overflow: hidden;
            background-image: linear-gradient(55deg, rgba(208, 208, 208, 0.03) 0%, rgba(208, 208, 208, 0.03) 20%, rgba(55, 55, 55, 0.03) 20%, rgba(55, 55, 55, 0.03) 40%, rgba(81, 81, 81, 0.03) 40%, rgba(81, 81, 81, 0.03) 60%, rgba(208, 208, 208, 0.03) 60%, rgba(208, 208, 208, 0.03) 80%, rgba(191, 191, 191, 0.03) 80%, rgba(191, 191, 191, 0.03) 100%), linear-gradient(257deg, rgba(72, 72, 72, 0.03) 0%, rgba(72, 72, 72, 0.03) 16.667%, rgba(138, 138, 138, 0.03) 16.667%, rgba(138, 138, 138, 0.03) 33.334%, rgba(54, 54, 54, 0.03) 33.334%, rgba(54, 54, 54, 0.03) 50.001%, rgba(161, 161, 161, 0.03) 50.001%, rgba(161, 161, 161, 0.03) 66.668%, rgba(17, 17, 17, 0.03) 66.668%, rgba(17, 17, 17, 0.03) 83.335%, rgba(230, 230, 230, 0.03) 83.335%, rgba(230, 230, 230, 0.03) 100.002%), linear-gradient(47deg, rgba(191, 191, 191, 0.01) 0%, rgba(191, 191, 191, 0.01) 16.667%, rgba(27, 27, 27, 0.01) 16.667%, rgba(27, 27, 27, 0.01) 33.334%, rgba(66, 66, 66, 0.01) 33.334%, rgba(66, 66, 66, 0.01) 50.001%, rgba(36, 36, 36, 0.01) 50.001%, rgba(36, 36, 36, 0.01) 66.668%, rgba(230, 230, 230, 0.01) 66.668%, rgba(230, 230, 230, 0.01) 83.335%, rgba(93, 93, 93, 0.01) 83.335%, rgba(93, 93, 93, 0.01) 100.002%), linear-gradient(90deg, #F3F3F3, #F3F3F3);
            padding: 4vw 0;
        }

        .jp-posts__wrap {
            position: absolute;
            transition: all var(--animation_speed) ease;
        }

        .jp-post {
            position: absolute;
            backface-visibility: hidden;
            z-index: 1;
            width: 100%;
            padding: 0 calc(4vw + 2em);
        }

            .jp-post.-current {
                transform: translateX(0);
                z-index: 2;
            }

                .jp-post.-current.-moveleft {
                    transform-origin: right center;
                    animation: leave var(--animation_speed);
                    opacity: 0;
                }

                .jp-post.-current.-moveright {
                    transform-origin: left center;
                    animation: leave var(--animation_speed);
                    opacity: 0;
                }

            .jp-post.-hidden {
                position: absolute;
                top: 0;
            }

                .jp-post.-hidden.-moving {
                    z-index: 3;
                }

                .jp-post.-hidden.-moveleft, .jp-post.-hidden.-moveright {
                    transform: translateX(0);
                }

            .jp-post.-next {
                transform: translateX(100vw);
            }

            .jp-post.-prev {
                transform: translateX(-100vw);
            }

            .jp-post.-moving {
                transition: all var(--animation_speed) cubic-bezier(0.165, 0.84, 0.44, 1) var(--animation_delay);
            }

                .jp-post.-moving.-current {
                    transition: transform var(--animation_speed) cubic-bezier(0.94, 0.01, 1, 1.02), opacity var(--animation_speed) cubic-bezier(0.94, 0.01, 1, 1.02);
                }

        @keyframes leave {
            0% {
                transform: scaleX(1);
                opacity: 1;
            }

            100% {
                transform: scaleX(2);
                opacity: 0;
            }
        }

        .jp-post__image {
            display: table;
            margin: auto;
        }

        .jp-posts__nav {
            width: 2em;
            height: 2em;
            border-radius: 50%;
            background-color: lightgray;
            color: white;
            position: fixed;
            display: flex;
            align-items: center;
            justify-content: center;
            top: 50%;
            transform: translateY(-50%);
            transition: all 300ms ease;
            z-index: 10;
        }

            .jp-posts__nav.-prev {
                left: 1vw;
                grid-area: prev;
            }

            .jp-posts__nav.-next {
                grid-area: next;
                right: 1vw;
            }

            .jp-posts__nav:hover {
                cursor: pointer;
                box-shadow: 0 0 0 0.3em white, 0 0 0 0.5em #adddff;
            }

                .jp-posts__nav:hover:focus {
                    box-shadow: 0 0 0 0.3em white, 0 0 0 0.5em #adddff;
                }

            .jp-posts__nav:focus {
                box-shadow: 0 0 0 0.2em #adddff;
                outline: none;
            }

        button {
            font-size: 15px;
        }
    </style>
    <style>
        body {
            font-family: arial;
            font-size: 10px;
        }

            body > p {
                color: #fff;
                text-align: center;
                font-size: 20px;
            }

        ::-moz-selection {
            background: none;
        }

        ::selection {
            background: none;
        }

        ::-moz-selection {
            background: none;
        }

        #keyboard {
            width: 1200px;
            height: 410px;
            margin: 20px auto;
            background: linear-gradient(to bottom, #65666a 0%, #0d0d11 9%, #0d0d11 9%, #0d0d11 12%, #0d0d11 37%, #0b0d19 100%);
            border-radius: 40px 40px 50px 50px;
            padding: 6px;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.5);
        }

            #keyboard .keyboard-plate {
                background: linear-gradient(to bottom, #44484b 0%, #404447 4%, #3f4346 86%, #6b6a6f 100%);
                border: 1px solid #333;
                width: 100%;
                position: relative;
                height: 100%;
                border-radius: 40px 40px 50px 50px;
                background: url(file:///C:/fta/microsoft-keyboard.jpg) repeat -30px -20px #fff;
                background-size: 7%;
                filter: brightness(0.95);
            }

            #keyboard .key {
                display: inline-block;
                float: left;
            }

                #keyboard .key:hover, #keyboard .key.pressed {
                    filter: brightness(0.95);
                    cursor: pointer;
                }

            #keyboard .media-key, #keyboard .function-key {
                font-size: 12px;
                color: #fff;
                background: linear-gradient(to bottom, #77767b 0%, #222327 4%, #222327 91%, #9c9da1 100%);
                padding: 3px 23px;
                box-shadow: 0 0 10px #000;
                border-radius: 3px;
            }

                #keyboard .media-key:hover, #keyboard .media-key.pressed, #keyboard .function-key:hover, #keyboard .function-key.pressed {
                    box-shadow: inset 0 0 10px #000;
                }

                #keyboard .media-key i, #keyboard .function-key i {
                    margin: 0 2px;
                    font-size: 8px;
                    vertical-align: middle;
                }

            #keyboard .function-keys {
                padding-left: 20px;
                overflow: hidden;
                padding-top: 2px;
                padding-bottom: 2px;
            }

                #keyboard .function-keys .function-key {
                    color: #cdd0d5;
                    font-size: 8px;
                    padding: 7px 0;
                    width: 40px;
                    text-align: center;
                    margin-right: 7px;
                    border-radius: 5px;
                    box-shadow: 0 0 2px rgba(0, 0, 0, 0.6);
                    border: 2px solid rgba(0, 0, 0, 0.6);
                    background: linear-gradient(to bottom, #44484b 0%, #404447 4%, #3f4346 86%, #6b6a6f 100%);
                }

                #keyboard .function-keys .esc, #keyboard .function-keys .f4, #keyboard .function-keys .f8 {
                    margin-right: 40px;
                }

                #keyboard .function-keys .f12 {
                    margin-right: 30px;
                }

            #keyboard .logo {
                position: absolute;
                right: 70px;
                top: 30px;
            }

                #keyboard .logo img {
                    width: 100px;
                    filter: brightness(1.8);
                }

            #keyboard .calc-top-panel {
                overflow: hidden;
                background: #1f2326;
                border-radius: 10px;
                border: 1px solid #000;
                margin: 20px 20px 10px;
                padding: 5px 0 5px;
                width: 655px;
                padding-left: 275px;
            }

            #keyboard .top-panel {
                overflow: hidden;
                margin: 20px 20px 10px;
                padding: 5px 0 5px;
                width: 655px;
                padding-left: 275px;
            }

                #keyboard .top-panel .play-pause, #keyboard .calc-top-panel .play-pause {
                    margin-right: 10px;
                }

                #keyboard .top-panel .volume-down i:first-child, #keyboard .top-panel .volume-up i:first-child, #keyboard .calc-top-panel .volume-down i:first-child, #keyboard .calc-top-panel .volume-up i:first-child {
                    font-size: 12px;
                }

                #keyboard .top-panel .volume-down i:last-child, #keyboard .top-panel .volume-up i:last-child, #keyboard .calc-top-panel .volume-down i:last-child, #keyboard .calc-top-panel .volume-up i:last-child {
                    font-size: 6px;
                }

                #keyboard .top-panel .mute, #keyboard .calc-top-panel .mute {
                    margin-left: 10px;
                }

                    #keyboard .top-panel .mute i, #keyboard .calc-top-panel .mute i {
                        display: inline-block;
                        width: 10px;
                        font-size: 6px;
                        height: 10px;
                        line-height: 10px;
                        border-radius: 50%;
                        border: 1px solid #fff;
                        text-align: center;
                    }

            #keyboard .calc-top-panel {
                width: 200px;
                float: right;
                padding: 0;
                margin: 0 20px 0 0;
                box-shadow: inset 0 0 5px #000;
            }

                #keyboard .calc-top-panel .media-key {
                    font-size: 12px;
                    padding: 6px 15px;
                    background: linear-gradient(to bottom, #44484b 0%, #404447 4%, #3f4346 86%, #6b6a6f 100%);
                }

                    #keyboard .calc-top-panel .media-key i {
                        font-size: 10px;
                    }

                #keyboard .calc-top-panel .led-indicator {
                    color: #333;
                    width: 12px;
                    height: 12px;
                    text-align: center;
                    font-weight: bold;
                    line-height: 13px;
                    font-size: 8px;
                    margin: 5px 18px;
                    border: 1px solid;
                    display: inline-block;
                    opacity: 0.9;
                    transition: all 0.3s ease-in;
                    border-radius: 2px;
                }

                    #keyboard .calc-top-panel .led-indicator.active, #keyboard .calc-top-panel .led-indicator:hover {
                        box-shadow: 0 0 5px rgba(206, 233, 87, 0.4);
                        color: #b2ca54;
                    }

            #keyboard .main-keys {
                margin-left: 20px;
                margin-top: 20px;
                float: left;
            }

                #keyboard .main-keys .main-keys-row {
                    clear: both;
                    position: relative;
                    margin-top: -1px;
                }

                    #keyboard .main-keys .main-keys-row.first-row {
                        z-index: 2;
                    }

                    #keyboard .main-keys .main-keys-row.second-row {
                        z-index: 4;
                    }

                    #keyboard .main-keys .main-keys-row.third-row {
                        z-index: 6;
                    }

                    #keyboard .main-keys .main-keys-row.forth-row {
                        z-index: 8;
                    }

                    #keyboard .main-keys .main-keys-row.fifth-row {
                        z-index: 10;
                    }

                    #keyboard .main-keys .main-keys-row.first-row .key {
                        margin-top: 0;
                    }

            #keyboard .centeral-keys {
                float: left;
                margin-left: 23px;
                margin-top: 20px;
                position: relative;
                height: 252px;
            }

                #keyboard .centeral-keys .arrow-keys {
                    bottom: 0;
                    position: absolute;
                }

                    #keyboard .centeral-keys .arrow-keys .arrow-up {
                        margin: 0 auto;
                        display: block;
                        clear: both;
                        float: none;
                    }

                    #keyboard .centeral-keys .arrow-keys .arrow-left, #keyboard .centeral-keys .arrow-keys .arrow-down, #keyboard .centeral-keys .arrow-keys .arrow-right {
                        position: relative;
                        z-index: 10;
                        margin-top: -2px;
                    }

            #keyboard .deep-key {
                border-style: solid;
                border-color: #222629 #292d30 #5d6164 #23272a;
                border-width: 3px 8px 8px 3px;
                background: #373b3e;
                color: #fff;
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.5);
                border-radius: 5px;
                width: 40px;
                height: 40px;
                overflow: hidden;
                position: relative;
            }

                #keyboard .deep-key:hover, #keyboard .deep-key.pressed {
                    border-bottom-width: 6px;
                    border-top-width: 5px;
                }

                #keyboard .deep-key .blue {
                    color: #5296d2;
                }

                #keyboard .deep-key.long-100 {
                    width: 115px;
                }

                #keyboard .deep-key.long-90 {
                    width: 92px;
                }

                #keyboard .deep-key.long-80 {
                    width: 85px;
                }

                #keyboard .deep-key.long-70 {
                    width: 70px;
                }

                #keyboard .deep-key.long-60 {
                    width: 60px;
                }

                #keyboard .deep-key.long-50 {
                    width: 50px;
                }

                #keyboard .deep-key.spacebar {
                    width: 270px;
                }

                #keyboard .deep-key.height-double {
                    overflow: visible;
                }

                    #keyboard .deep-key.height-double:after {
                        content: "";
                        display: block;
                        width: 40px;
                        left: -3px;
                        height: 53px;
                        border-style: solid;
                        box-shadow: 0 5px 5px rgba(0, 0, 0, 0.3);
                        border-color: #222629 #292d30 #5d6164 #23272a;
                        border-width: 0 8px 8px 3px;
                        background: #373b3e;
                        position: absolute;
                        z-index: 2;
                    }

                #keyboard .deep-key.enter {
                    width: 65px;
                    position: absolute;
                    overflow: visible;
                    text-align: right;
                }

                    #keyboard .deep-key.enter .enter-arrow {
                        position: absolute;
                        margin-left: -3px;
                        margin-top: 1px;
                    }

                    #keyboard .deep-key.enter .enter-line-hoz {
                        letter-spacing: -1px;
                    }

                    #keyboard .deep-key.enter .enter-line-ver {
                        display: inline-block;
                        position: absolute;
                        margin-top: 1px;
                        margin-lfet: -2px;
                    }

                    #keyboard .deep-key.enter:after {
                        content: "";
                        display: block;
                        width: 55px;
                        left: 7px;
                        height: 52px;
                        border-style: solid;
                        box-shadow: 0 5px 5px rgba(0, 0, 0, 0.3);
                        border-color: #222629 #292d30 #5d6164 #23272a;
                        border-width: 0 8px 8px 3px;
                        background: #373b3e;
                        position: absolute;
                        z-index: 2;
                    }

                #keyboard .deep-key .top-left, #keyboard .deep-key .top-right, #keyboard .deep-key .bottom-left, #keyboard .deep-key .bottom-right {
                    width: 8px;
                    float: left;
                    padding: 5px;
                    height: 8px;
                }

                #keyboard .deep-key .top-center, #keyboard .deep-key .bottom-center, #keyboard .deep-key .half-top, #keyboard .deep-key .half-bottom {
                    width: 100%;
                    height: 8px;
                    line-height: 20px;
                    padding: 4px 0 0;
                    text-align: center;
                }

                #keyboard .deep-key .top-right, #keyboard .deep-key .bottom-right {
                    text-align: right;
                }

                #keyboard .deep-key .whole {
                    text-align: center;
                    padding: 14px 2px;
                }

                #keyboard .deep-key .windows {
                    font-size: 14px;
                }

                #keyboard .deep-key .options i {
                    border: 1px solid #fff;
                    padding: 2px 3px;
                    font-size: 7px;
                }

                #keyboard .deep-key.tab {
                    letter-spacing: -1px;
                }

            #keyboard .calc-keys {
                float: right;
                margin-right: 18px;
                margin-top: 20px;
            }

                #keyboard .calc-keys .calc-row {
                    clear: both;
                    position: relative;
                }

                    #keyboard .calc-keys .calc-row .key {
                        margin-top: -1px;
                    }

                    #keyboard .calc-keys .calc-row.first-row {
                        z-index: 2;
                        margin-top: 0;
                    }

                        #keyboard .calc-keys .calc-row.first-row .key {
                            margin-top: 0;
                        }

                    #keyboard .calc-keys .calc-row.second-row {
                        z-index: 4;
                    }

                    #keyboard .calc-keys .calc-row.third-row {
                        z-index: 6;
                    }

                    #keyboard .calc-keys .calc-row.forth-row {
                        z-index: 8;
                    }

                    #keyboard .calc-keys .calc-row.fifth-row {
                        z-index: 10;
                    }

        .center-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            margin-right: -50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>
<body>

    <div class="slide">
        <div class="jp-posts">
            <button v-if="posts" class="jp-posts__nav -prev" onclick='prevPage("xbox-controller.txt")'>
                <span class="hidden"><b><</b></span>
            </button>
            <button v-if="posts" class="jp-posts__nav -next" onclick='nextPage("microsoft-mouse.txt")'>
                <span class="hidden"><b>></b></span>
            </button>
        </div>
    </div>

    <script>
        function prevPage(page) {
        LoadPage(page);
        }
        function nextPage(page) {
        LoadPage(page);
        }
    </script>

    <div id='keyboard' class="center-screen">
        <div class='keyboard-plate'>
            <div class='top-panel'>
            </div>
            <div class='function-keys'>
                <div class='key function-key esc' key-code='27'>Esc</div>
                <div class='key function-key f1' key-code='112'>F1</div>
                <div class='key function-key f2' key-code='113'>F2</div>
                <div class='key function-key f3' key-code='114'>F3</div>
                <div class='key function-key f4' key-code='115'>F4</div>
                <div class='key function-key f5' key-code='116'>F5</div>
                <div class='key function-key f6' key-code='117'>F6</div>
                <div class='key function-key f7' key-code='118'>F7</div>
                <div class='key function-key f8' key-code='119'>F8</div>
                <div class='key function-key f9' key-code='120'>F9</div>
                <div class='key function-key f10' key-code='121'>F10</div>
                <div class='key function-key f11' key-code='122'>F11</div>
                <div class='key function-key f12' key-code='123'>F12</div>
                <div class='key function-key prtscn'>PrtScn</div>
                <div class='key function-key scrlk' function='scrolllook' key-code='145'>ScrLk</div>
                <div class='key function-key pause' key-code='19'>Pause</div>
                <div class='calc-top-panel'>
                    <div class='key media-key'></div>
                    <div class='led-numlock led-indicator'>1</div>
                    <div class='led-capslock led-indicator'>A</div>
                    <div class='led-scrolllook led-indicator'>
                        <i class='fas fa-down'></i>
                    </div>
                </div>
            </div>
            <div class='main-keys'>
                <div class='first-row main-keys-row'>
                    <div class='key deep-key' key-code='223'>
                        <div class='top-left'>¬</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>'</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='49'>
                        <div class='top-left'>!</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>1</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='50'>
                        <div class='top-left'>"</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>2</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='51'>
                        <div class='top-left'>£</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>3</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='52'>
                        <div class='top-left'>$</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>4</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='53'>
                        <div class='top-left'>%</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>5</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='54'>
                        <div class='top-left'>^</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>6</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='55'>
                        <div class='top-left'>&</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>7</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='56'>
                        <div class='top-left'>*</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>8</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='57'>
                        <div class='top-left'>(</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>9</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='48'>
                        <div class='top-left'>)</div>
                        <div class='top-right'></div>
                        <div class='bottom-left'>0</div>
                        <div class='bottom-right'></div>
                    </div>
                    <div class='key deep-key' key-code='189'>
                        <div class='top-center'>_</div>
                        <div class='bottom-center'>-</div>
                    </div>
                    <div class='key deep-key' key-code='187'>
                        <div class='top-center'>+</div>
                        <div class='bottom-center'>=</div>
                    </div>
                    <div class='key deep-key long-80' key-code='8'>
                        <div class='whole align-right'>Backspace</div>
                    </div>
                </div>
                <div class='second-row main-keys-row'>
                    <div class='key deep-key long-60 tab' key-code='9'>
                        <div class='half-top'>| ------- ></div>
                        <div class='half-bottom'>< ------- |</div>
                    </div>
                    <div class='key deep-key' key-code='81'>
                        <div class='whole'>Q</div>
                    </div>
                    <div class='key deep-key' key-code='87'>
                        <div class='whole'>W</div>
                    </div>
                    <div class='key deep-key' key-code='69'>
                        <div class='whole'>E</div>
                    </div>
                    <div class='key deep-key' key-code='82'>
                        <div class='whole'>R</div>
                    </div>
                    <div class='key deep-key' key-code='84'>
                        <div class='whole'>T</div>
                    </div>
                    <div class='key deep-key' key-code='89'>
                        <div class='whole'>Y</div>
                    </div>
                    <div class='key deep-key' key-code='85'>
                        <div class='whole'>U</div>
                    </div>
                    <div class='key deep-key' key-code='73'>
                        <div class='whole'>I</div>
                    </div>
                    <div class='key deep-key' key-code='79'>
                        <div class='whole'>O</div>
                    </div>
                    <div class='key deep-key' key-code='80'>
                        <div class='whole'>P</div>
                    </div>
                    <div class='key deep-key' key-code='219'>
                        <div class='half-top'>{</div>
                        <div class='half-bottom'>[</div>
                    </div>
                    <div class='key deep-key' key-code='221'>
                        <div class='half-top'>}</div>
                        <div class='half-bottom'>]</div>
                    </div>
                    <div class='key deep-key enter' key-code='13' ss='enter'>
                        <div class='whole'>
                            <span class='enter-arrow'><</span>
                            <span class='enter-line-hoz'>----------</span>
                            <span class='enter-line-ver'>'</span>
                        </div>
                    </div>
                </div>
                <div class='third-row main-keys-row'>
                    <div class='key deep-key long-70' function='capslock' key-code='20'>
                        <div class='whole align-right'>Caps Lock</div>
                    </div>
                    <div class='key deep-key' key-code='65'>
                        <div class='whole'>A</div>
                    </div>
                    <div class='key deep-key' key-code='83'>
                        <div class='whole'>S</div>
                    </div>
                    <div class='key deep-key' key-code='68'>
                        <div class='whole'>D</div>
                    </div>
                    <div class='key deep-key' key-code='70'>
                        <div class='whole'>F</div>
                    </div>
                    <div class='key deep-key' key-code='71'>
                        <div class='whole'>G</div>
                    </div>
                    <div class='key deep-key' key-code='72'>
                        <div class='whole'>H</div>
                    </div>
                    <div class='key deep-key' key-code='74'>
                        <div class='whole'>J</div>
                    </div>
                    <div class='key deep-key' key-code='75'>
                        <div class='whole'>K</div>
                    </div>
                    <div class='key deep-key' key-code='76'>
                        <div class='whole'>L</div>
                    </div>
                    <div class='key deep-key' key-code='186'>
                        <div class='half-top'>:</div>
                        <div class='half-bottom'>;</div>
                    </div>
                    <div class='key deep-key' key-code='192'>
                        <div class='half-top'>@</div>
                        <div class='half-bottom'>'</div>
                    </div>
                    <div class='key deep-key' key-code='222'>
                        <div class='half-top'>~</div>
                        <div class='half-bottom'>#</div>
                    </div>
                </div>
                <div class='forth-row main-keys-row'>
                    <div class='key deep-key long-50'>
                        <div class='whole shift'>
                            <i class='fas fa-arrow-up'></i>
                        </div>
                    </div>
                    <div class='key deep-key long-50' key-code='220'>
                        <div class='half-top'></div>
                        <div class='half-bottom'>\</div>
                    </div>
                    <div class='key deep-key' key-code='90'>
                        <div class='whole'>Z</div>
                    </div>
                    <div class='key deep-key' key-code='88'>
                        <div class='whole'>X</div>
                    </div>
                    <div class='key deep-key' key-code='67'>
                        <div class='whole'>C</div>
                    </div>
                    <div class='key deep-key' key-code='86'>
                        <div class='whole'>V</div>
                    </div>
                    <div class='key deep-key' key-code='66'>
                        <div class='whole'>B</div>
                    </div>
                    <div class='key deep-key' key-code='78'>
                        <div class='whole'>N</div>
                    </div>
                    <div class='key deep-key' key-code='77'>
                        <div class='whole'>M</div>
                    </div>
                    <div class='key deep-key' key-code='188'>
                        <div class='half-top'><</div>
                        <div class='half-bottom'>,</div>
                    </div>
                    <div class='key deep-key' key-code='190'>
                        <div class='half-top'>></div>
                        <div class='half-bottom'>.</div>
                    </div>
                    <div class='key deep-key' key-code='191'>
                        <div class='half-top'>?</div>
                        <div class='half-bottom'>/</div>
                    </div>
                    <div class='key deep-key long-100' key-code='16' ss='spacebar'>
                        <div class='whole shift'>
                            <i class='fas fa-arrow-up'></i>
                        </div>
                    </div>
                </div>
                <div class='fifth-row main-keys-row'>
                    <div class='key deep-key long-60' key-code='17'>
                        <div class='whole'>Ctrl</div>
                    </div>
                    <div class='key deep-key long-50'>
                        <div class='whole windows'>
                            <i class='fab fa-windows'></i>
                        </div>
                    </div>
                    <div class='key deep-key long-50' key-code='18'>
                        <div class='whole'>Alt</div>
                    </div>
                    <div class='key deep-key spacebar' key-code='32' ss='spacebar'>
                        <div class='whole'></div>
                    </div>
                    <div class='key deep-key long-50'>
                        <div class='whole'>Alt Gr</div>
                    </div>
                    <div class='key deep-key long-50'>
                        <div class='whole blue'>Fn</div>
                    </div>
                    <div class='key deep-key long-70' key-code='93'>
                        <div class='whole options'>
                            <i class='fas fa-bars'></i>
                        </div>
                    </div>
                    <div class='key deep-key long-70'>
                        <div class='whole'>Ctrl</div>
                    </div>
                </div>
            </div>
            <div class='centeral-keys'>
                <div class='first-row'>
                    <div class='key deep-key align-left' key-code='45'>
                        <div class='whole'>Insert</div>
                    </div>
                    <div class='key deep-key align-left' key-code='36'>
                        <div class='whole'>Home</div>
                    </div>
                    <div class='key deep-key align-left' key-code='33'>
                        <div class='whole'>Page Up</div>
                    </div>
                </div>
                <div class='second-row'>
                    <div class='key deep-key align-left' key-code='46'>
                        <div class='whole'>Delete</div>
                    </div>
                    <div class='key deep-key align-left' key-code='35'>
                        <div class='whole'>End</div>
                    </div>
                    <div class='key deep-key align-left' key-code='34'>
                        <div class='whole'>Page Down</div>
                    </div>
                </div>
                <div class='arrow-keys'>
                    <div class='key deep-key arrow-up' key-code='38'>
                        <div class='whole'>
                            <i class='fas fa-chevron-up'></i>
                        </div>
                    </div>
                    <div class='key deep-key arrow-left' key-code='37'>
                        <div class='whole'>
                            <i class='fas fa-chevron-left'></i>
                        </div>
                    </div>
                    <div class='key deep-key arrow-down' key-code='40'>
                        <div class='whole'>
                            <i class='fas fa-chevron-down'></i>
                        </div>
                    </div>
                    <div class='key deep-key arrow-right' key-code='39'>
                        <div class='whole'>
                            <i class='fas fa-chevron-right'></i>
                        </div>
                    </div>
                </div>
            </div>
            <div class='calc-keys'>
                <div class='calc-row first-row'>
                    <div class='key deep-key' function='numlock' key-code='144'>
                        <div class='whole'>Num Lock</div>
                    </div>
                    <div class='key deep-key' key-code='111'>
                        <div class='whole'>/</div>
                    </div>
                    <div class='key deep-key' key-code='106'>
                        <div class='whole'>*</div>
                    </div>
                    <div class='key deep-key' key-code='109'>
                        <div class='whole'>-</div>
                    </div>
                </div>
                <div class='calc-row second-row'>
                    <div class='key deep-key' key-code='103'>
                        <div class='whole'>7</div>
                    </div>
                    <div class='key deep-key' key-code='104'>
                        <div class='whole'>8</div>
                    </div>
                    <div class='key deep-key' key-code='105'>
                        <div class='whole'>9</div>
                    </div>
                    <div class='key deep-key height-double' key-code='107'>
                        <div class='whole'>+</div>
                    </div>
                </div>
                <div class='calc-row third-row'>
                    <div class='key deep-key' key-code='100'>
                        <div class='whole'>4</div>
                    </div>
                    <div class='key deep-key' key-code='101'>
                        <div class='whole'>5</div>
                    </div>
                    <div class='key deep-key' key-code='102'>
                        <div class='whole'>6</div>
                    </div>
                </div>
                <div class='calc-row forth-row'>
                    <div class='key deep-key' key-code='97'>
                        <div class='whole'>1</div>
                    </div>
                    <div class='key deep-key' key-code='98'>
                        <div class='whole'>2</div>
                    </div>
                    <div class='key deep-key' key-code='99'>
                        <div class='whole'>3</div>
                    </div>
                    <div class='key deep-key height-double'>
                        <div class='whole'>Enter</div>
                    </div>
                </div>
                <div class='calc-row fifth-row'>
                    <div class='key deep-key long-90' key-code='96'>
                        <div class='whole'>0</div>
                    </div>
                    <div class='key deep-key' key-code='110'>
                        <div class='whole'>.</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdn.rawgit.com/admsev/jquery-play-sound/master/jquery.playSound.js"></script>
    <script>
        $(".key").on("mousedown", e => {
        let target = e.currentTarget;
        $(".key").removeClass("pressed");
        $(target).toggleClass("pressed");

        var fn = $(target).attr("function");

        if (typeof fn !== typeof undefined && fn !== false) {
        switch (fn) {
        case "numlock":
        $(".led-indicator.led-numlock").toggleClass("active");
        break;
        case "capslock":
        $(".led-indicator.led-capslock").toggleClass("active");
        break;
        case "scrolllook":
        $(".led-indicator.led-scrolllook").toggleClass("active");
        break;}

        }
        });

        $(".key").on("mouseup", () => {
        $(".key").removeClass("pressed");
        });

        $(".deep-key").on("click", e => {
        let target = e.currentTarget;
        let ss = $(target).attr("ss");

        if (typeof ss !== typeof undefined && ss !== false) {
        switch (ss) {
        case "spacebar":
        $.playSound("http://www.freesfx.co.uk/rx2/mp3s/5/16952_1461335341.mp3");
        break;
        case "enter":
        $.playSound("http://www.freesfx.co.uk/rx2/mp3s/5/16951_1461335341.mp3");
        break;}

        } else {
        $.playSound("http://www.freesfx.co.uk/rx2/mp3s/6/18660_1464810669.mp3");
        }
        });

        $(".function-key, .media-key").on("click", () => {
        $.playSound("http://freesound.org/data/previews/181/181003_2901073-lq.mp3");
        });

        $(window).on("keydown", e => {
        let keyCode = e.keyCode;
        $('.key[key-code="' + keyCode + '"]').click();
        $('.key[key-code="' + keyCode + '"]').mousedown();
        return false;
        e.preventDefault();
        });

        $(window).on("keyup", e => {
        let keyCode = e.keyCode;
        $('.key[key-code="' + keyCode + '"]').removeClass("pressed");

        return false;
        e.preventDefault();
        });
    </script>

    <div id="pad"></div>
    <script>
    var buttonMap = {
            a: 0,
            b: 0,
            x: 0,
            y: 0,
            lb: 0,
            rb: 0,
            lt: 0,
            rt: 0,
            map: 0,
            menu: 0,
            lstick: 0,
            rstick: 0,
            du: 0,
            dd: 0,
            dl: 0,
            dr: 0,
            xbox: 0
        };
    var axisMap = { lx: 0, ly: 0, rx: 0, rx: 0 };
        (function (l, r) {
    if (l.getElementById("livereloadscript")) return;
    r = l.createElement("script");
    r.async = 1;
    r.src =
        "//" +
        (window.location.host || "localhost").split(":")[0] +
        ":35730/livereload.js?snipver=1";
    r.id = "livereloadscript";
    l.getElementsByTagName("head")[0].appendChild(r);
})(window.document);
(function (global, factory) {
    typeof exports === "object" && typeof module !== "undefined"
        ? (module.exports = factory())
        : typeof define === "function" && define.amd
        ? define(factory)
        : ((global =
              typeof globalThis !== "undefined" ? globalThis : global || self),
          (global.GameController = factory()));
})(this, function () {
    "use strict";

    function noop() {}
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === "function";
    }
    function safe_not_equal(a, b) {
        return a != a
            ? b == b
            : a !== b ||
                  (a && typeof a === "object") ||
                  typeof a === "function";
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(" ");
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null) node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? "important" : "");
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? "add" : "remove"](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent("CustomEvent");
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing) return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length) binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            } else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= 1 << i % 31;
    }
    function init(
        component,
        options,
        instance,
        create_fragment,
        not_equal,
        props,
        dirty = [-1]
    ) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = (component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(
                parent_component ? parent_component.$$.context : []
            ),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        });
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                  const value = rest.length ? rest[0] : ret;
                  if ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {
                      if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
                      if (ready) make_dirty(component, i);
                  }
                  return ret;
              })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            } else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro) transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks =
                this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1) callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(
            custom_event(type, Object.assign({ version: "3.24.1" }, detail))
        );
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(
        node,
        event,
        handler,
        options,
        has_prevent_default,
        has_stop_propagation
    ) {
        const modifiers =
            options === true
                ? ["capture"]
                : options
                ? Array.from(Object.keys(options))
                : [];
        if (has_prevent_default) modifiers.push("preventDefault");
        if (has_stop_propagation) modifiers.push("stopPropagation");
        dispatch_dev("SvelteDOMAddEventListener", {
            node,
            event,
            handler,
            modifiers
        });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", {
                node,
                event,
                handler,
                modifiers
            });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(
                    `<${name}> received an unexpected slot "${slot_key}".`
                );
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
        $capture_state() {}
        $inject_state() {}
    }

    /* src/Controller.svelte generated by Svelte v3.24.1 */

    const file = "src/Controller.svelte";

    function create_fragment(ctx) {
        let section;
        let div0;
        let t0;
        let div2;
        let div1;
        let t1;
        let div4;
        let div3;
        let t2;
        let button0;
        let t3;
        let button1;
        let t4;
        let button2;
        let t5;
        let button3;
        let t6;
        let button4;
        let t7;
        let button5;
        let t8;
        let button6;
        let t9;
        let button7;
        let t10;
        let button8;
        let t11;
        let button9;
        let t12;
        let button10;
        let t13;
        let button11;
        let t14;
        let button12;
        let t15;
        let button13;
        let button13_style_value;
        let t16;
        let button14;
        let button14_style_value;
        let mounted;
        let dispose;

        const block = {
            c: function create() {
                section = element("section");
                div0 = element("div");
                t0 = space();
                div2 = element("div");
                div1 = element("div");
                t1 = space();
                div4 = element("div");
                div3 = element("div");
                t2 = space();
                button0 = element("button");
                t3 = space();
                button1 = element("button");
                t4 = space();
                button2 = element("button");
                t5 = space();
                button3 = element("button");
                t6 = space();
                button4 = element("button");
                t7 = space();
                button5 = element("button");
                t8 = space();
                button6 = element("button");
                t9 = space();
                button7 = element("button");
                t10 = space();
                button8 = element("button");
                t11 = space();
                button9 = element("button");
                t12 = space();
                button10 = element("button");
                t13 = space();
                button11 = element("button");
                t14 = space();
                button12 = element("button");
                t15 = space();
                button13 = element("button");
                t16 = space();
                button14 = element("button");
                attr_dev(div0, "class", "pad svelte-1xis06h");
                add_location(div0, file, 94, 1, 1831);
                attr_dev(div1, "class", "stick svelte-1xis06h");
                set_style(div1, "transform", /*stickl*/ ctx[1]());
                toggle_class(div1, "click", /*buttonMap*/ ctx[0].lstick);
                add_location(div1, file, 96, 2, 1882);
                attr_dev(div2, "class", "well left svelte-1xis06h");
                add_location(div2, file, 95, 1, 1856);
                attr_dev(div3, "class", "stick svelte-1xis06h");
                set_style(div3, "transform", /*stickr*/ ctx[2]());
                toggle_class(div3, "click", /*buttonMap*/ ctx[0].rstick);
                add_location(div3, file, 99, 2, 2006);
                attr_dev(div4, "class", "well right svelte-1xis06h");
                add_location(div4, file, 98, 1, 1979);
                attr_dev(button0, "class", "button a svelte-1xis06h");
                toggle_class(button0, "on", /*buttonMap*/ ctx[0].a);
                add_location(button0, file, 101, 1, 2103);
                attr_dev(button1, "class", "button b svelte-1xis06h");
                toggle_class(button1, "on", /*buttonMap*/ ctx[0].b);
                add_location(button1, file, 102, 1, 2162);
                attr_dev(button2, "class", "button x svelte-1xis06h");
                toggle_class(button2, "on", /*buttonMap*/ ctx[0].x);
                add_location(button2, file, 103, 1, 2221);
                attr_dev(button3, "class", "button y svelte-1xis06h");
                toggle_class(button3, "on", /*buttonMap*/ ctx[0].y);
                add_location(button3, file, 104, 1, 2280);
                attr_dev(button4, "class", "button map svelte-1xis06h");
                toggle_class(button4, "on", /*buttonMap*/ ctx[0].map);
                add_location(button4, file, 105, 1, 2339);
                attr_dev(button5, "class", "button menu svelte-1xis06h");
                toggle_class(button5, "on", /*buttonMap*/ ctx[0].menu);
                add_location(button5, file, 106, 1, 2402);
                attr_dev(button6, "class", "button xbox svelte-1xis06h");
                toggle_class(button6, "on", /*buttonMap*/ ctx[0].xbox);
                add_location(button6, file, 107, 1, 2467);
                attr_dev(button7, "class", "dpad du svelte-1xis06h");
                toggle_class(button7, "on", /*buttonMap*/ ctx[0].du);
                add_location(button7, file, 108, 1, 2532);
                attr_dev(button8, "class", "dpad dr svelte-1xis06h");
                toggle_class(button8, "on", /*buttonMap*/ ctx[0].dr);
                add_location(button8, file, 109, 1, 2591);
                attr_dev(button9, "class", "dpad dd svelte-1xis06h");
                toggle_class(button9, "on", /*buttonMap*/ ctx[0].dd);
                add_location(button9, file, 110, 1, 2650);
                attr_dev(button10, "class", "dpad dl svelte-1xis06h");
                toggle_class(button10, "on", /*buttonMap*/ ctx[0].dl);
                add_location(button10, file, 111, 1, 2709);
                attr_dev(button11, "class", "bumper left svelte-1xis06h");
                toggle_class(button11, "on", /*buttonMap*/ ctx[0].lb);
                add_location(button11, file, 112, 1, 2768);
                attr_dev(button12, "class", "bumper right svelte-1xis06h");
                toggle_class(button12, "on", /*buttonMap*/ ctx[0].rb);
                add_location(button12, file, 113, 1, 2831);
                attr_dev(button13, "class", "trigger left svelte-1xis06h");
                attr_dev(
                    button13,
                    "style",
                    (button13_style_value = /*trigger*/ ctx[3]("lt"))
                );
                add_location(button13, file, 114, 1, 2895);
                attr_dev(button14, "class", "trigger right svelte-1xis06h");
                attr_dev(
                    button14,
                    "style",
                    (button14_style_value = /*trigger*/ ctx[3]("rt"))
                );
                add_location(button14, file, 115, 1, 2959);
                attr_dev(section, "class", "controller svelte-1xis06h");
                add_location(section, file, 93, 0, 1801);
            },
            l: function claim(nodes) {
                throw new Error(
                    "options.hydrate only works if the component was compiled with the `hydratable: true` option"
                );
            },
            m: function mount(target, anchor) {
                insert_dev(target, section, anchor);
                append_dev(section, div0);
                append_dev(section, t0);
                append_dev(section, div2);
                append_dev(div2, div1);
                append_dev(section, t1);
                append_dev(section, div4);
                append_dev(div4, div3);
                append_dev(section, t2);
                append_dev(section, button0);
                append_dev(section, t3);
                append_dev(section, button1);
                append_dev(section, t4);
                append_dev(section, button2);
                append_dev(section, t5);
                append_dev(section, button3);
                append_dev(section, t6);
                append_dev(section, button4);
                append_dev(section, t7);
                append_dev(section, button5);
                append_dev(section, t8);
                append_dev(section, button6);
                append_dev(section, t9);
                append_dev(section, button7);
                append_dev(section, t10);
                append_dev(section, button8);
                append_dev(section, t11);
                append_dev(section, button9);
                append_dev(section, t12);
                append_dev(section, button10);
                append_dev(section, t13);
                append_dev(section, button11);
                append_dev(section, t14);
                append_dev(section, button12);
                append_dev(section, t15);
                append_dev(section, button13);
                append_dev(section, t16);
                append_dev(section, button14);

                if (!mounted) {
                    dispose = [
                        listen_dev(
                            window,
                            "gamepadconnected",
                            /*plugIn*/ ctx[4],
                            false,
                            false,
                            false
                        ),
                        listen_dev(
                            window,
                            "gamepaddisconnected",
                            /*unPlug*/ ctx[5],
                            false,
                            false,
                            false
                        )
                    ];

                    mounted = true;
                }
            },
            p: function update(ctx, [dirty]) {
                if (dirty & /*stickl*/ 2) {
                    set_style(div1, "transform", /*stickl*/ ctx[1]());
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(div1, "click", /*buttonMap*/ ctx[0].lstick);
                }

                if (dirty & /*stickr*/ 4) {
                    set_style(div3, "transform", /*stickr*/ ctx[2]());
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(div3, "click", /*buttonMap*/ ctx[0].rstick);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button0, "on", /*buttonMap*/ ctx[0].a);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button1, "on", /*buttonMap*/ ctx[0].b);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button2, "on", /*buttonMap*/ ctx[0].x);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button3, "on", /*buttonMap*/ ctx[0].y);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button4, "on", /*buttonMap*/ ctx[0].map);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button5, "on", /*buttonMap*/ ctx[0].menu);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button6, "on", /*buttonMap*/ ctx[0].xbox);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button7, "on", /*buttonMap*/ ctx[0].du);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button8, "on", /*buttonMap*/ ctx[0].dr);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button9, "on", /*buttonMap*/ ctx[0].dd);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button10, "on", /*buttonMap*/ ctx[0].dl);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button11, "on", /*buttonMap*/ ctx[0].lb);
                }

                if (dirty & /*buttonMap*/ 1) {
                    toggle_class(button12, "on", /*buttonMap*/ ctx[0].rb);
                }

                if (
                    dirty & /*trigger*/ 8 &&
                    button13_style_value !==
                        (button13_style_value = /*trigger*/ ctx[3]("lt"))
                ) {
                    attr_dev(button13, "style", button13_style_value);
                }

                if (
                    dirty & /*trigger*/ 8 &&
                    button14_style_value !==
                        (button14_style_value = /*trigger*/ ctx[3]("rt"))
                ) {
                    attr_dev(button14, "style", button14_style_value);
                }
            },
            i: noop,
            o: noop,
            d: function destroy(detaching) {
                if (detaching) detach_dev(section);
                mounted = false;
                run_all(dispose);
            }
        };

        dispatch_dev("SvelteRegisterBlock", {
            block,
            id: create_fragment.name,
            type: "component",
            source: "",
            ctx
        });

        return block;
    }
    function instance($$self, $$props, $$invalidate) {
        let poll;

        buttonMap = {
            a: 0,
            b: 0,
            x: 0,
            y: 0,
            lb: 0,
            rb: 0,
            lt: 0,
            rt: 0,
            map: 0,
            menu: 0,
            lstick: 0,
            rstick: 0,
            du: 0,
            dd: 0,
            dl: 0,
            dr: 0,
            xbox: 0
        };

        axisMap = { lx: 0, ly: 0, rx: 0, rx: 0 };

        const plugIn = () => {
            startController();
        };

        const unPlug = () => {
            cancelAnimationFrame(poll);
        };

        const startController = () => {
            const gamepads = navigator.getGamepads();

            if (!gamepads) {
                return;
            }

            const pad = gamepads[0];

            const buttons = [
                "a",
                "b",
                "x",
                "y",
                "lb",
                "rb",
                "lt",
                "rt",
                "map",
                "menu",
                "lstick",
                "rstick",
                "du",
                "dd",
                "dl",
                "dr",
                "xbox"
            ];

            const axes = ["lx", "ly", "rx", "ry"];

            pad.buttons.forEach((button, i) => {
                $$invalidate(
                    0,
                    (buttonMap[buttons[i]] = button.pressed ? button.value : 0),
                    buttonMap
                );
            });

            pad.axes.forEach((axis, i) => {
                $$invalidate(
                    7,
                    (axisMap[axes[i]] =
                        axis > 0.01 || axis < -0.01
                            ? parseFloat(axis.toFixed(3))
                            : 0),
                    axisMap
                );
            });

            poll = requestAnimationFrame(startController);
        };

        const writable_props = [];

        Object.keys($$props).forEach((key) => {
            if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$")
                console.warn(
                    `<Controller> was created with unknown prop '${key}'`
                );
        });

        let { $$slots = {}, $$scope } = $$props;
        validate_slots("Controller", $$slots, []);

        $$self.$capture_state = () => ({
            poll,
            buttonMap,
            axisMap,
            plugIn,
            unPlug,
            startController,
            stickl,
            stickr,
            trigger
        });

        $$self.$inject_state = ($$props) => {
            if ("poll" in $$props) poll = $$props.poll;
            if ("buttonMap" in $$props)
                $$invalidate(0, (buttonMap = $$props.buttonMap));
            if ("axisMap" in $$props)
                $$invalidate(7, (axisMap = $$props.axisMap));
            if ("stickl" in $$props) $$invalidate(1, (stickl = $$props.stickl));
            if ("stickr" in $$props) $$invalidate(2, (stickr = $$props.stickr));
            if ("trigger" in $$props)
                $$invalidate(3, (trigger = $$props.trigger));
        };

        let stickl;
        let stickr;
        let trigger;

        if ($$props && "$$inject" in $$props) {
            $$self.$inject_state($$props.$$inject);
        }

        $$self.$$.update = () => {
            if ($$self.$$.dirty & /*axisMap, buttonMap*/ 129) {
                $$invalidate(
                    1,
                    (stickl = () => {
                        let x = axisMap.lx * 25;
                        let y = axisMap.ly * 25;
                        let rx = axisMap.lx * 10;
                        let ry = axisMap.ly * 10;
                        let z = 1 - buttonMap.lstick * 0.05;
                        return `translateX(${x}%) translateY(${y}%) rotateY(${rx}deg) rotateX(${ry}deg) scale(${z})`;
                    })
                );
            }

            if ($$self.$$.dirty & /*axisMap, buttonMap*/ 129) {
                $$invalidate(
                    2,
                    (stickr = () => {
                        let x = axisMap.rx * 25;
                        let y = axisMap.ry * 25;
                        let rx = axisMap.rx * 10;
                        let ry = axisMap.ry * 10;
                        let z = 1 - buttonMap.rstick * 0.05;
                        return `translateX(${x}%) translateY(${y}%) rotateY(${rx}deg) rotateX(${ry}deg) scale(${z})`;
                    })
                );
            }

            if ($$self.$$.dirty & /*buttonMap*/ 1) {
                $$invalidate(
                    3,
                    (trigger = (side) => {
                        let s = buttonMap[side];
                        let sx = side === "rt" ? -s : s;

                        return `
			transform: scaleX(${sx}) scaleY(${s}) rotate(-69deg);
			opacity: ${0.3 + s};
		`;
                    })
                );
            }
        };

        return [buttonMap, stickl, stickr, trigger, plugIn, unPlug];
    }

    class Controller extends SvelteComponentDev {
        constructor(options) {
            super(options);
            init(this, options, instance, create_fragment, safe_not_equal, {});

            dispatch_dev("SvelteRegisterComponent", {
                component: this,
                tagName: "Controller",
                options,
                id: create_fragment.name
            });
        }
    }

    return Controller;
});
//# sourceMappingURL=bundle.js.map

new GameController({
    target: document.getElementById("pad")
});

setInterval(pushControllerData, 10);

function pushControllerData() {
	try {
  		getController((buttonMap["a"]).toString(), (buttonMap["b"]).toString(), (buttonMap["x"]).toString(), (buttonMap["y"]).toString(), (buttonMap["lb"]).toString(), (buttonMap["rb"]).toString(), (buttonMap["lt"]).toString(), (buttonMap["rt"]).toString(), (buttonMap["map"]).toString(), (buttonMap["menu"]).toString(), (buttonMap["lstick"]).toString(), (buttonMap["rstick"]).toString(), (buttonMap["du"]).toString(), (buttonMap["dd"]).toString(), (buttonMap["dl"]).toString(), (buttonMap["dr"]).toString(), (buttonMap["xbox"]).toString(), (axisMap["lx"] * 1024).toString(), (axisMap["ly"] * 1024).toString(), (axisMap["rx"] * 1024).toString(), (axisMap["ry"] * 1024).toString());
	}
	catch { }
}

    </script>
</body>
</html>
